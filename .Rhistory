mat[1,1,drop=T]
summary(x2)
# 요소의 개수가 부족한 경우 자동으로 반복해서 채워 넣음
x2 = matrix(1:8, nrow = 3)
x2
row.summary(x2)
# 행 단위로 보고 싶을 때는 apply 함수를 이용용
apply(x2, 2, mean)
apply(x2, 2, min)
apply(x2, 2, max)
?apply
# Array 실습
a1 = array(1:30, dim=c(2,3,5))
a1
a1[1,4,5]
a1[1,3,5]
a1[1,3,]
a1[1,3]
a1[,,3]
a1[,2,]
a1[1,,]
rm(list=ls())
;
# Q1
x = seq(10,38,2)
x
m1 = matrix(x, nrow = 3)
m1
m_max_v = max(m1)
m_max_v
m_max_v = max(m1)
m_min_v = min(m1)
m_min_v
row_max = apply(m1, 1, max)
row_max
col_max = apply(m1, 2, max)
col_max
m1; m2; m_max_v, m_min_v; row_max; col_max;
m2 = m1 + 100
m1; m2; m_max_v, m_min_v; row_max; col_max;
m1; m2; m_max_v; m_min_v; row_max; col_max;
m1; m2; m_max_v; m_min_v; row_max; col_max;
# Q2
n1 = c(1,2,3)
n2 = c(4,5,6)
n3 = c(7,8,9)
Q2_mat = cbind(n1, n2, n3)
colnames(Q2_mat) = NULL
Q2_mat
# Q3
m2 = matrix(1:9, byrow=T)
m2
# Q3
m2 = matrix(1:9, ncol = 3, byrow=T)
m2
# Q4
colnames(m2) = c("col1", "col2", "col3")
rownames(m2) = c("row1", "row2", "row3")
m2
# Q5
alpha = matrix(letters[1:6], ncol=3)
alpha
alpha2 = rbind(alpha, c('x', 'y', 'z'))
alpha2
alpha3 = rbind(alpha, c('s', 'p'))
alpha3
rinif(10,11,20)
runif(10,11,20)
rm(list=ls())
set.seed(2)
x = runif(10, 0, 11)
y = runif(10, 11, 20)
df = data.frame(x,y)
print(df)
lm(y~x, data=df)
model = lm(y~x, data=df)
print(model)
set.seed(2)
y = runif(10, -10, 20)
u = runif(10, 0, 11)
v = runif(10, 11, 20)
w = runif(10, 21, 30)
df = data.frame(y, u, v, w)
print(df)
print(model)
model = lm(y ~ u + v + w)
print(model)
rm(list=ls())
set.seed(2)
y = runif(10, -10, 20)
u = runif(10, 0, 11)
v = runif(10, 11, 20)
w = runif(10, 21, 30)
df = data.frame(y, u, v, w)
print(df)
model = lm(y ~ u + v + w)
print(model)
plot(model)
summary(model)
# cars 데이터 셋에 대해서 실습
data(cars)
str(cars)
model_cars = lm(dist ~ speed + speed^2, data=cars)
summary(model_cars)
plot(model_cars)
cars = cbind(cars, speed2)
speed2 = cars$speed^2
cars = cbind(cars, speed2)
model_cars = lm(dist ~ speed + speed2, data=cars)
summary(model_cars)
plot(model_cars)
# 최적회귀방정식 선택: 전진 및 후진 선택법
rm(list=ls())
# Q5
alpha = matrix(letters[1:6], ncol=3)
alpha3 = cbind(alpha, c('s', 'p'))
print(alpha3)
# 최적회귀방정식 선택: 전진 및 후진 선택법
rm(list=ls())
X1 = c(7, 1, 11, 11, 7, 11, 3, 1, 2, 21, 1, 11, 10)
X2 = c(26, 29, 56, 31, 52, 55, 71, 31, 54, 47, 40, 66, 68)
X3 = c(6, 15, 8, 8, 6, 9, 17, 22, 18, 4, 23, 9, 8)
X4 = c(60, 52, 20, 47, 33, 22, 6, 44, 22, 26, 34, 12, 12)
Y = c(78.5, 74.3, 104.3, 87.6, 95.9, 109.2, 102.7, 72.5, 93.1,
115.9, 83.8, 113.3, 109.4)
df = data.frame(X1, X2, X3, X4, Y)
step(lm(Y ~ 1, df), scope=list(lower=~1, upper=~X1+X2+X3+X4), direction="forward")
step(lm(Y ~ X1+X2+X3+X4+, df), scope=list(lower=~X1+X2+X3+X4, upper=~1), direction="backward")
step(lm(Y ~ X1+X2+X3+X4, df), scope=list(lower=~X1+X2+X3+X4, upper=~1), direction="backward")
step(lm(Y ~ X1+X2+X3+X4, df), scope=list(lower=~X1+X2+X3+X4, upper=~1), direction="backward", trace=FALSE)
step(lm(Y ~ X1+X2+X3+X4, df), scope=list(lower=~X1+X2+X3+X4, upper=~1), direction="both")
step(lm(Y ~ X1+X2+X3+X4, df), direction="backward", trace=FALSE)
step(lm(Y ~ X1+X2+X3+X4, df), scope=list(lower=~1, upper=~X1+X2+X3+X4), direction="both")
# factor
score = c(1, 3, 2, 4, 2, 1, 3, 5, 1, 3, 3, 3)
class(score)
summary(score)
f_score = factor(score)
f_score
summary(f_score)
class(f_score)
# factor 형 데이터가 갖는 level을 리턴
level(f_score)
# factor 형 데이터가 갖는 level을 리턴
levels(f_score)
plot(score)
plot(f_score)
plot(score)
DOW = c("월", "수", "토", "월", "목", "화")
class(DOW)
summary(DOW)
f_DOW = factor(DOW)
summary(f_DOW)
levels(f_DOW)
week.korabbname = c("일", "월", "화", "수", "목", "금", "토")
f_DOW2 = factor(DOW)
f_DOW2
f_DOW2 = factor(DOW, levels=week.korabbname)
f_DOW2 = factor(DOW, levels=week.korabbname)
f_DOW2
summary(f_DOW2)
summary(f_DOW2)
btype = factor(c("A", "O", "AB", "B", "O", "A"),
levels=c("A", "B", "O"))
btype
summary(btype)
btype2 = factor(c("A", "O", "AB", "B", "O", "A"),
levels=c("A", "B", "O", "AB"))
btype2
summary(btype2)
gender = factor(c(1,2,1,2,1,1,1,2,2,2,1),
levles=c(1,2),
lables=c("남", "여"))
gender = factor(c(1,2,1,2,1,1,1,2,2,2,1),
levles=c(1,2),
labels=c("남", "여"))
gender = factor(c(1,2,1,2,1,1,1,2,2,2,1),
levels=c(1,2),
labels=c("남", "여"))
summary(gender)
# data frame
data()
data(sleep)
str(sleep)
view(sleep)
View(sleep)
rm(sleep)
data(iris)
View(iris)
rm(iris)
iris
# data frame
# 내장 데이터 셋의 종류 보기
data(iris)
head(iris)
head(iris, n=10)
tail(iris, n=10)
summary(iris)
summary(iris, bygroup)
str(iris)
View(iris)
# data frame
# 내장 데이터 셋의 종류 보기
data(iris)
# data frame
# 내장 데이터 셋의 종류 보기
data("iris")
force(iris)
# data frame
# 내장 데이터 셋의 종류 보기
data(iris)
force(iris)
View(iris)
iris$Species == "setosa"
iris[iris$Species == "setosa"]
iris$Species[iris$Species == "setosa"]
iris$Species[iris$Species ~= "setosa"]
iris$Species[iris$Species ^= "setosa"]
iris$Species[iris$Species != "setosa"]
iris$Species[4,6]
iris$Species
iris$Species[5]
iris[2,4]
iris[2,5]
iris[2]
iris[,2]
iris[2,]
iris$Species[2]
subset(iris, select=Species, subsuet="setosa")
subset(iris, select=Species, subsuet=Species == "setosa")
subset(iris, select=Species, subsuet=(Species == "setosa"))
a=matrix(1:6, nrow = 2)
a
a[1,2]
a[1]
a[1,]
a[1, , drop=T]
a[1, , drop=F]
#Dataframe 실습
no <- c(1,2,3,4)
name <- c('Apple','Banana','Peach','Berry')
qty <- c(5,2,7,9)
price <- c(500,200,200,500)
fruit <- data.frame(no, name, qty, price)
str(fruit)
View(fruit)
fruit[1,]
fruit[-1,]
fruit[,3, drop=F]
fruit[,3] # fruit[,3, drop=F]
fruit$qty
fruit[[3]]
fruit[3]  # 데이터프레임 형식 유지
str(fruit$qty)
str(fruit[3])
english <- c(90, 80, 60, 70)
math <- c(50, 60, 100, 20)
classnum <- c(1,1,2,2)
df_midterm <- data.frame(
english, math, classnum)
df_midterm
str(df_midterm)
colnames(df_midterm)
rownames(df_midterm)
names(df_midterm)
mean(df_midterm$english)
mean(df_midterm$math)
df_midterm2$영어
df <- data.frame(var1=c(4,3,8),
var2=c(2,6)) # 오류
getwd() # setwd('xxx')
#csv파일열기
score <- read.csv("Day_2/data/score.csv")
View(score)
str(score)
score$sum <-
score$math+score$english+score$science
score$result <- ifelse(score$sum >= 200,
"pass", "fail")
score
summary(score$result)
table(score$result)
str(score)
score$result = as.factor(score$result)
summary(score$result) # score$result = as.factor(score$result)
# score$result = as.factor(score$result) # as.factor로 변환
str(score)
summary(score)
score$class = factor(score$class)
score$grade<-ifelse(score$sum >= 230,"A",
ifelse(score$sum >= 215,"B",
ifelse(score$sum >=200,"C","D")))
score
summary(score$result)
summary(score$grade)
score$grade<-as.factor(ifelse(score$sum >= 230,"A",
ifelse(score$sum >= 215,"B",
ifelse(score$sum >=200,"C","D"))))
score
summary(score$grade)
score$id = as.character(score$id)
score$class = factor(score$class)
score$grade<-as.factor(ifelse(score$sum >= 230,"A",
ifelse(score$sum >= 215,"B",
ifelse(score$sum >=200,"C","D"))))
score
summary(score$grade)
score
summary(score)
# order() 와 sort()
v <- c(10,3,7,4,8)
sort(v)
order(v)
v(order(v))
v[order(v)]
emp <- read.csv(file.choose(),
stringsAsFactors = F)
# GUI로 파일 선택할 수 있게끔
emp <- read.csv(file.choose(),
stringsAsFactors = F)
str(emp)
View(emp)
iris$Sepal.Length
iris$Species[iris$Sepal.Length < 5]
View(emp)
# 1. emp에서 직원 이름
emp$ename
emp[,2]
emp[,"ename"]
emp[,2, drop=FALSE]
emp[,"ename",drop=F]
emp[2]
emp["ename"]
# 2. emp에서 직원이름, 잡, 샐러리
emp[,c(2,3,6)]
emp[,c("ename","job","sal")]
subset(emp,select = c(ename, job, sal))
subset(emp,select = c(ename, job, sal))
subset(emp, select = c(ename, job, sal))
?subset
subset(emp, c(ename, job, sal))
subset(emp, ,c(ename, job, sal))
subset(emp, , c(ename, job, sal))
# 3. emp에서 1,2,3 행 들만
emp[1:3,]
emp[c(1,2,3),]
subset(emp,subset= emp$ename=="KING")
subset(emp,emp$ename=="KING")
# 4. ename이 "KING"인 직원의 모든 정보
emp[9,]
emp$ename=="KING"
emp[c(F,F,F,F,F,F,F,F,T,F,F,F,
F,F,F,F,F,F,F,F),]
emp[emp$ename == "KING"]
emp$ename == "KING"
emp[[emp$ename == "KING"]]
emp[emp$ename == "KING"]
emp[c(emp$ename == "KING")]
emp(emp$ename == "KING")
emp$ename == "KING")
emp$ename == "KING"
emp[emp$ename == "KING",]
emp[emp$ename == "KING",]
emp[!is.na(emp$comm), c("ename", "comm")]
rm(list=ls())
# Q1
a = array(1:24, c(2,3,4))
a
a[2,3,4]
# Q1_2
a[,2,]
# Q1_3
a[1,,]
# Q1_4
a[,,3]
# Q1_5
(a + 100)
# Q1_6
a[1, 2:3, ]
# Q1_6
a[, , 4] * 100
# Q1_8
a[2, , 2] = a[2, , 2] + 100
a
# Q2
x = 1:5
y = seq(2,10,2)
y
x
df1 = data.frame(x,y)
df1
col1 = 1:5
col2 = letters[1:5]
col3 = 6:10
df2 = data.frame(col1, col2, col3)
df2
df3 = data.frame(제품명, 가격, 판매량, stringAsFactors = FALSE)
제품명 = c("사과", "딸기", "수박")
가격 = c(1800, 1500, 3000)
판매량 = c(24, 38, 13)
df3 = data.frame(제품명, 가격, 판매량, stringAsFactors = FALSE)
df3
?data.frame
df3 = data.frame(제품명, 가격, 판매량, stringsAsFactors = FALSE)
df3
# Q4
print(mean(df3))
# Q4
mean(df3$가격)
mean(df3$판매량)
df4 = data.frame(name, gender, math, stringsAsFactors = F)
# Q6
name <- c("Potter", "Elsa", "Gates", "Wendy", "Ben")
gender <- factor(c("M", "F", "M", "F", "M"))
math <- c(85, 76, 99, 88, 40)
df4 = data.frame(name, gender, math, stringsAsFactors = F)
df4
df4$gender = as.factors(df4$gender)
df4$gender = as.factor(df4$gender)
str(df4)
# Q6_1
stat = c(76, 73, 95, 82, 35)
df4$stat = stat
df4$
df4
df4
df4$score = df4$math + df4$stat
df4
df4$grade = ifelse(df4$score >= 150, "A",
ifelse(df4$score >= 100, "B",
ifelse(df4$score >= 70, "C")))
df4
emp <- read.csv(file.choose(),
stringsAsFactors = F)
# Q8
emp[c(2,3,4),]
# Q9
emp$ename
# Q10
emp[, c(ename, sal)]
# Q10
emp[, c("ename", "sal")]
# Q11
emp[emp$job = "SALESMAN", c("sal", "job")]
# Q11
emp[emp$job=="SALESMAN", c("sal", "job")]
View(emp)
# Q12
emp[emp$sal > 1000 & emp$sal < 3000, c("ename", "sal", "empno")]
# Q13
emp[emp$job!="ANALYST", c("ename", "job", "sal")]
# Q14
emp[emp$job!="SALESMAN" | "ANALYST", c("ename", "job")]
# Q14
emp[emp$job=="SALESMAN" | "ANALYST", c("ename", "job")]
# Q14
emp[emp$job=="SALESMAN" | emp$job=="ANALYST", c("ename", "job")]
# Q15
emp[!is.na(emp$comm), c("ename", "sal")]
# Q16
sort(emp$sal, descending = T)
?sort
# Q16
sort(emp$sal, decreasing  = T)
?order
# Q16
# sort(emp$sal, decreasing  = T)
emp[order(emp$sal, decreasing = T),]
# Q16
# sort(emp$sal, decreasing  = T)
emp[order(emp$sal, decreasing = T),]
# Q16
# sort(emp$sal, decreasing  = T)
emp[order(emp$sal, decreasing = F),]
?factor
class(df4$name)
class(df4$gender)
class(df4$math)
sort(emp$sal)
sort(emp$sal,)
df4$grade = ifelse(df4$score >= 150, "A",
ifelse(df4$score >= 100, "B",
ifelse(df4$score >= 70, "C", "D")))
df4
install.packages("tabplot")
data(diamond)
data(diamonds)
install.packages("ggplot2")
library(ggplot2)
data("diamonds")
library(tabplot)
tabplot(diamonds)
tableplot(diamonds)
is.na(diamonds$price) <- diamonds$cut == "Ideal"
is.na(diamonds$cut) <- (runif(nrow(diamonds)) > 0.8)
tableplot(diamonds)
is.na(diamonds$price) <- diamonds$cut == "Ideal"
is.na(diamonds$cut) <- (runif(nrow(diamonds)) > 0.8)
diamonds
tableplot(diamonds, select = c(carat, price, cut, color, clarity), sortCol = price)
rm(diamonds)
data(diamonds)
tableplots(ddiamonds)
tableplot(diamonds)
is.na(diamonds$price) <- diamonds$cut == "Ideal"
is.na(diamonds$price)
is.na(diamonds$cut) <- (runif(nrow(diamonds)) > 0.8)
tableplot(diamonds)
rm(list=ls())
rm(list=ls())
View(df4)
source('C:/Rstudy/Antique/Package_reshape.R', echo=TRUE)
